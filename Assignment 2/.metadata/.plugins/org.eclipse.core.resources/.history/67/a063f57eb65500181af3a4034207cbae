package tests;
import static org.junit.Assert.assertEquals;

import java.util.ArrayList;
import java.util.jar.Manifest;

import org.junit.Before;
import org.junit.Test;

public class manifestGeneratorTests {
	/*
	 * Test 0: Declare a manifestGenerator object
	 */
	manifestGenerator generator;
	
	/*
	 * Test 1: Create a manifestGenerator object
	 */
	@Before @Test public void createGenerator() {
		generator = new manifestGenerator();
	}
	

	/*
	 * Test 2: Given dummy item list, make a manifest that contains an ordinary truck
	 */
	@Test public void addTrucks() {
		Stock storeStock=new Stock();
		Item storeItem = new Item("rice",2,4,100,500,null,0);
		storeStock.add(storeItem);
		generator.generate(storeStock);
		
		Manifest manifest = generator.get();
		ArrayList<Truck> trucks = manifest.get();
		ordinaryTruck truck = new ordinaryTruck();
		assertEquals("Could not make a manifest with an ordinary truck",
				truck.getClass(),trucks.get(0).getClass());
	}
	
	/*
	 * Test 3: Given a dummy item list with a cold item, make a manifest with a cold truck
	 */
	@Test public void addColdTruck() {
		Stock storeStock=new Stock();
		Item storeItem = new Item("ice",2,4,100,500,-1,0);
		storeStock.add(storeItem);
		generator.generate(storeStock);
		
		Manifest manifest = generator.get();
		ArrayList<Truck> trucks = manifest.get();
		refrigeratedTruck truck = new refrigeratedTruck();
		assertEquals("Could not make a manifest with a cold truck",
				truck.getClass(),trucks.get(0).getClass());
	}
	
	/*
	 * Test 2: Given a dummy item list from a store, interpret and
	 *		   make a manifest with the correct restock amounts
	 */
	@Test public void createBasicManifest() {
		Stock storeStock=new Stock();
		Item storeItem = new Item("rice",2,4,100,400,null,0);
		storeStock.add(storeItem);
		generator.generate(storeStock);
		
		Manifest generatedMani = generator.get();
		Stock maniStock = generatedMani.get();
		Item maniItem = maniStock.get().get(0);
		
		assertEquals("Didn't correctly generate a manifest with the right number of items",
				400,maniItem.getQuantity());
	
	}
	
	/*
	 * Test 3: Sorts the items from coldest to hottest
	 */
	@Test public void sortsItems() {
		Item item1 = new Item ("rice",2,4,100,500,null,0);
		Item item2 = new Item ("ice",2,4,100,500,-1,0);
		Item item3 = new Item ("colderice",2,4,100,500,-10,0);
		
	}
	
	//takes two manifests, checks they have the same trucks with the same contents.
	public boolean manifestChecker (Manifest m1,Manifest m2) {
		ArrayList<Truck> trucks1;
		ArrayList<Truck> trucks2;
		trucks1=m1.get();
		trucks2=m2.get();
		Stock stock1;
		Stock stock2;
		ArrayList<Item> items1;
		ArrayList<Item> items2;
		
		//Checks both manifests have the same number of trucks
		if (trucks1.size()==trucks2.size()) {
			//Iterate over every truck
			for (int index=0;index<trucks1.size();index++) {
				//checks trucks in both manifests are of the same type 
				if (trucks1.get(index).getClass()==trucks2.get(index).getClass()) {
					//check the trucks have the same number of items on board
					if (trucks1.get(index).getCapacity()==trucks2.get(index).getCapacity()) {
						stock1=trucks1.get(index).get();
						stock2=trucks2.get(index).get();
						items1=stock1.get();
						items2=stock2.get();
						//iterate all the items	
						for (int index2;index2<items1.size();index++) {
							//check items have the same name
							if(items1.get(index2).getName()==items2.get(index2).getName()) {
								//check they have the same quantity
								if (items1.get(index2).getQuantity()==items2.get(index2).getQuantity()) {
									//Further if statements to make sure items are the same can go here
									//Name and Quantity are all that are needed for now. 
								}
								else {
									return false;
								}
							}
							else {
								return false;
							}
						}
					}
					else {
						return false;
					}
				 }
				else {
					return false;
				}
			}
		}
		else {
			return false;
		}
		return true;
			
		
	}
	
	
}
